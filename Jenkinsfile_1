node ('slave1') {
  environment {
    TF_CREDS = credentials('terraf-cr')
  }
	stage ('clinic1 - Checkout') {
 	  checkout([$class: 'GitSCM',
    branches: [[name: '*/main']],
    doGenerateSubmoduleConfigurations: false,
    extensions: [], submoduleCfg: [],
    userRemoteConfigs: [[credentialsId: 'git2', url: 'git@github.com:SerhiiDykaliuk/petclinic.git']]])
  }
  stage ('clinic1 - Build') {
    withMaven(maven: 'maven3') {
      sh "mvn clean package"
      }
    }
  stage('build image') {
    sh "docker build -t 245715980904.dkr.ecr.us-west-2.amazonaws.com/test-repo-1-prj-1:latest ."
  }
  stage('Push image') {
    docker.withRegistry('https://245715980904.dkr.ecr.us-west-2.amazonaws.com', 'ecr:us-west-2:ecr-cr') {
        sh "docker push 245715980904.dkr.ecr.us-west-2.amazonaws.com/test-repo-1-prj-1:latest"
    }
  }
  dir("terraform") {
    stage ('checkout tf files') {
      checkout([$class: 'GitSCM',
      branches: [[name: '*/main']],
      doGenerateSubmoduleConfigurations: false,
      extensions: [], submoduleCfg: [],
      userRemoteConfigs: [[credentialsId: 'gitter', url: 'git@github.com:SerhiiDykaliuk/repo.git']]])
    }

    stage ('run terraform') {
      environment {
        AWS_ACCESS_KEY_ID = $TF_CREDS_USR
        AWS_SECRET_ACCESS_KEY = $TF_CREDS_PSW
      }
      sh "echo $AWS_ACCESS_KEY_ID"
      sh "terraform apply -auto-approve"
    }
  }
}
